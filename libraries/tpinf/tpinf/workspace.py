from pathlib import Path

def create_makefile():
    
    part_c = sorted([f.name[4] for f in Path('.').glob('part*.cpp')])

    q = [(f.name[8], f.name[14]) for f in Path('.').glob('question*-part*.cpp')]
    toc = {part:[] for part in sorted([item[1] for item in q])}
    for question, part in q:
        toc[part].append(question)
    for p in toc.keys():
        toc[p].sort()
        
    with open(Path('makefile'), 'w') as makefile:
        makefile.write('# generated by tpinf\n\n')
        makefile.write('GIT_CONFIG = $(HOME)/.gitconfig\n')
        makefile.write('\n')
        makefile.write('help:\n')
        makefile.write('\t@ls $(GIT_CONFIG) >/dev/null 2>/dev/null || bash -c "echo -e \'[user]\\n\\tname=Examinator\\n\\temail = examinator@centralesupelec.fr\\n\' > $(GIT_CONFIG)"\n')
        makefile.write('\t@echo\n')
        makefile.write('\t@echo "Type the following commands in order to pass the exam."\n')
        makefile.write('\t@echo "You can use the <tab> key (symbol \'->|\' on the keyboard) "\n')
        makefile.write('\t@echo "to complement a command. For example, if you type"\n')
        makefile.write('\t@echo "\\033[1;33mmake in\\033[0m "\n')
        makefile.write('\t@echo "with \\033[1;30mno return key\\033[0m and then you press the <tab> key,"\n')
        makefile.write('\t@echo "you will get the command"\n')
        makefile.write('\t@echo "\\033[1;33mmake instructions\\033[0m"\n')
        makefile.write('\t@echo "fully written automatically, ready to be executed."\n')
        makefile.write('\t@echo\n')
        makefile.write('\t@echo "------------------------------"\n')
        makefile.write('\t@echo\n')
        makefile.write('\t@echo "\\033[1;30mmake instructions     \\033[0m <- displays the instructions."\n')
        makefile.write('\t@echo "\\033[1;30mmake oops             \\033[0m <- \\033[0;31mcall this if you delete a file accidentally.\\033[0m"\n')
        makefile.write('\t@echo\n')
        makefile.write('\t@echo "------------------------------"\n')
        makefile.write('\t@echo\n')
        for part, questions in toc.items():
            for question in questions:
                makefile.write('\t@echo "\033[1;30mmake question{}-part{}  \033[0m <- compiles and executes question {} of part {}."\n'.format(question, part, question, part))
            makefile.write('\t@echo\n')
        makefile.write('\t@echo "------------------------------"\n')
        makefile.write('\t@echo\n')
        makefile.write('\t@echo "Compiling \\033[1;31mmust not have warnings !!!\\033[0m"\n')
        makefile.write('\t@echo\n')
        makefile.write('\t@echo\n')
        makefile.write('\t@echo\n')
        makefile.write('\n')
        makefile.write('oops:\n')
        makefile.write('\t@echo\n')
        makefile.write('\t@echo "You need to recover a deleted file? Do not panic, this is the solution."\n')
        makefile.write('\t@echo "Follow the following steps (type \\033[1;30mmake oops\\033[0m in order to view"\n')
        makefile.write('\t@echo "this message  again):"\n')
        makefile.write('\t@echo "- Step 1 : \\033[1;30mmake show-history\\033[0m            <-- identify the commit \\033[1;30mid\\033[0m of the commit where"\n')
        makefile.write('\t@echo "                                            your file is (the first code of a line)"\n')
        makefile.write('\t@echo "- Step 2 : \\033[1;30mmake recover ID=... FILE=...\\033[0m <-- Tell the commit \\033[1;30mid\\033[0m and the file name and you"\n')
        makefile.write('\t@echo "                                            will get it back."\n')
        makefile.write('\t@echo "      e.g. \\033[1;30mmake recover ID=34b9dfd FILE=part1.hpp\\033[0m"\n')
        makefile.write('\t@echo "- Step 3 : be sure that your editor notices the file change."\n')
        makefile.write('\t@echo\n')
        makefile.write('\t@echo\n')
        makefile.write('\n')
        makefile.write('show-history:\n')
        makefile.write('\t@git log --oneline\n')
        makefile.write('\n')
        makefile.write('recover:\n')
        makefile.write('\t@git checkout $(ID) -- $(FILE) && echo file $(FILE) has been recovered.\n')
        makefile.write('\n')
        makefile.write('\n')
        makefile.write('\n')
        makefile.write('CFLAGS = -Wall -pedantic -std=c++17\n')
        makefile.write('\n')
        makefile.write('instructions:\n')
        makefile.write('\t@evince instructions.pdf &\n')
        makefile.write('\n')
        makefile.write('stamp: TIME = `date +"%H:%M:%S"`\n')
        makefile.write('stamp:\n')
        makefile.write('\t@rm -f test\n')
        makefile.write('\t@git commit -am "compiling of part $(PART), question $(QUESTION) : at $(TIME)" > /dev/null || true\n')
        makefile.write('\n')
        makefile.write('run:\n')
        makefile.write('\t@echo\n')
        makefile.write('\t@echo\n')
        makefile.write('\t@echo "\033[1;32mrunning program\033[0m..."\n')
        makefile.write('\t@echo\n')
        makefile.write('\t@./test\n')
        makefile.write('\n')
        makefile.write('\n')
        makefile.write('\n')
        makefile.write('\n')
        for part, questions in toc.items():
            for question in questions:
                target = 'question{}-part{}'.format(question, part)
                files = []
                if part in part_c:
                    files.append('part{}.cpp'.format(part))
                files.append(target + '.cpp')
                files = ' '.join(files)
                makefile.write('.PHONY: {}\n'.format(target))
                makefile.write('{}:\n'.format(target))
                makefile.write('\t@make --quiet stamp PART={} QUESTION={}\n'.format(part, question))
                makefile.write('\tg++ -o test $(CFLAGS) {}\n'.format(files))
                makefile.write('\t@make --quiet run\n')
                makefile.write('\n')


